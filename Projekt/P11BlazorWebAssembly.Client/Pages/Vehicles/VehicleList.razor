@page "/vehicles/vehiclesList"

@attribute [Authorize]
@inject IVehicleDealershipService VehicleDealershipService
@inject ILanguageService LanguageService
@inject ILocalStorageService LocalStorage
@using Blazored.LocalStorage;
@using Microsoft.AspNetCore.Components.Authorization;
@using P06Shop.Shared.Auth;
@using P06Shop.Shared.Services.AuthService;
@inject IJSRuntime JSRuntime
@inject IAuthService AuthService
@inject ILocalStorageService LocalStorageService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

@if (selectedLanguage != null)
{
    <h3>@LanguageService.GetLanguage(selectedLanguage, "VehiclesListTitle")</h3>

    <p>
        <a href="vehicles/createvehicle">@LanguageService.GetLanguage(selectedLanguage, "CreateNewVehicleLink")</a>
    </p>

    @if (vehicles == null)
    {
        <div class="spinner"></div>
    }
    else
    {
        <div>
            <InputText @bind-Value=searchTerm></InputText>
            <button class="btn btn-primary" @onclick=Search>@LanguageService.GetLanguage(selectedLanguage, "SearchButton")</button>
        </div>

        <table class="table">
            <thead>
             <tr>
                    <th>@LanguageService.GetLanguage(selectedLanguage, "IdColumn")</th>
                    <th>@LanguageService.GetLanguage(selectedLanguage, "ModelColumn")</th>
                    <th>@LanguageService.GetLanguage(selectedLanguage, "FuelColumn")</th>
                    <th></th>

                </tr>
            </thead>
            <tbody>
                @foreach (var vehicle in vehicles)
                {
                    <tr>
                        <td>@vehicle.Id</td>
                        <td>@vehicle.Model</td>
                        <td>@vehicle.Fuel</td>

                        <td>
                            <button class="btn btn-primary" @onclick="()=> GoToEdit(vehicle.Id)">@LanguageService.GetLanguage(selectedLanguage, "EditButton")</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <button class="btn btn-primary" disabled="@(currentPage==1)" @onclick="PreviousPage">@LanguageService.GetLanguage(selectedLanguage, "PreviousButton")</button>
        <span>@currentPage</span>
        <button class="btn btn-primary" @onclick="NextPage">@LanguageService.GetLanguage(selectedLanguage, "NextButton")</button>
    }
} else{
            <div class="spinner"></div>
}

@code {
    private List<Vehicle> vehicles;
    private string message;

    private int currentPage = 1;
    private const int pageSize = 10;

    private string searchTerm = "";
    private string selectedLanguage;

    private bool isDarkTheme;
    private string selectedTheme;

    protected override async Task OnInitializedAsync()
    {
        selectedLanguage = await LocalStorageService.GetItemAsync<string>("language") ?? "english";
        message = LanguageService.GetLanguage(selectedLanguage, "LoadingVehicles");

        selectedTheme = await LocalStorage.GetItemAsync<string>("theme") ?? "light";
        isDarkTheme = selectedTheme == "dark";

        // Set the initial theme using JSInterop
        await JSRuntime.InvokeVoidAsync("themeSwitcher.setTheme", selectedTheme);
        await LoadVehicles();
    }

    private async Task LoadVehicles()
    {
        var response = await VehicleDealershipService.SearchVehiclesAsync(searchTerm, currentPage, pageSize);
        if (response.Success)
        {
            vehicles = response.Data;
            message = null;
        }
        else
        {
            vehicles = null;
            message = response.Message;
        }
    }

    void GoToEdit(int id)
    {
        NavigationManager.NavigateTo($"/vehicles/editvehicle/{id}");
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadVehicles();
        }
    }

    private async Task NextPage()
    {
        currentPage++;
        await LoadVehicles();
    }

    private async Task Search()
    {
        currentPage = 1;
        await LoadVehicles();
    }
}
